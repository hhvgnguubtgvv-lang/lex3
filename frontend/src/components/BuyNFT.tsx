
import React, { useState, useEffect } from 'react';
import { ethers } from 'ethers';
import { CONTRACT_ADDRESSES, PAYMENT_TOKEN } from '../utils/constants';

declare global {
  interface Window {
    ethereum?: any;
  }
}

// ABI –¥–ª—è —á—Ç–µ–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
const MARKETPLACE_ABI = [
  "function getListing(uint256 _listingId) external view returns (tuple(uint256 listingId, address tokenOwner, address assetContract, uint256 tokenId, uint256 quantity, address currency, uint256 pricePerToken, uint128 startTimestamp, uint128 endTimestamp, bool reserved) listing)",
  "function totalListings() external view returns (uint256)"
];

interface Listing {
  listingId: number;
  tokenOwner: string;
  assetContract: string;
  tokenId: number;
  quantity: number;
  currency: string;
  pricePerToken: string;
  active: boolean;
}

const BuyNFT: React.FC = () => {
  const [listings, setListings] = useState<Listing[]>([]);
  const [loading, setLoading] = useState(true);
  const [account, setAccount] = useState('');

  const connectWallet = async () => {
    if (!window.ethereum) {
      alert('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!');
      return;
    }

    try {
      const accounts = await window.ethereum.request({ 
        method: 'eth_requestAccounts' 
      });
      setAccount(accounts[0]);
      loadListings();
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
  const loadListings = async () => {
    if (!window.ethereum) return;

    setLoading(true);
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const marketplaceAddress = CONTRACT_ADDRESSES[137];
      
      console.log('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥–∏ —Å –∞–¥—Ä–µ—Å–∞:', marketplaceAddress);
      
      const marketplace = new ethers.Contract(marketplaceAddress, MARKETPLACE_ABI, provider);
      
      // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
      const totalListings = await marketplace.totalListings();
      console.log('üìä –í—Å–µ–≥–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤ –≤ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ:', totalListings.toString());

      const activeListings: Listing[] = [];

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–∂–¥—ã–π –ª–∏—Å—Ç–∏–Ω–≥
      for (let i = 1; i <= Number(totalListings); i++) {
        try {
          const listingData = await marketplace.getListing(i);
          console.log(`üìù –õ–∏—Å—Ç–∏–Ω–≥ ${i}:`, listingData);

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ª–∏—Å—Ç–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω
          if (listingData.active) {
            const listing: Listing = {
              listingId: Number(listingData.listingId),
              tokenOwner: listingData.tokenOwner,
              assetContract: listingData.assetContract,
              tokenId: Number(listingData.tokenId),
              quantity: Number(listingData.quantity),
              currency: listingData.currency,
              pricePerToken: ethers.formatUnits(listingData.pricePerToken, 18),
              active: listingData.active
            };

            console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ª–∏—Å—Ç–∏–Ω–≥ ${i}:`, listing);
            activeListings.push(listing);
          } else {
            console.log(`‚ùå –õ–∏—Å—Ç–∏–Ω–≥ ${i} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`);
          }
        } catch (error) {
          console.log(`‚ö†Ô∏è –õ–∏—Å—Ç–∏–Ω–≥ ${i} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞:`, error);
        }
      }

      console.log('üéØ –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∏:', activeListings);
      setListings(activeListings);

    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤:', error);
    } finally {
      setLoading(false);
    }
  };

  // –ü–æ–∫—É–ø–∫–∞ NFT
  const buyNFT = async (listingId: number, price: string) => {
    if (!window.ethereum || !account) {
      alert('–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
      return;
    }

    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const marketplaceAddress = CONTRACT_ADDRESSES[137];
      
      // ABI –¥–ª—è –ø–æ–∫—É–ø–∫–∏
      const buyABI = [
        "function buyFromListing(uint256 listingId, address buyFor, uint256 quantity, address currency, uint256 totalPrice) external payable"
      ];
      
      const marketplace = new ethers.Contract(marketplaceAddress, buyABI, signer);
      
      const totalPrice = ethers.parseUnits(price, 18);
      
      console.log('üõí –ü–æ–∫—É–ø–∞–µ–º NFT...', { 
        listingId, 
        price: price,
        totalPrice: totalPrice.toString(),
        currency: PAYMENT_TOKEN.address 
      });
      
      const tx = await marketplace.buyFromListing(
        listingId,
        account, // –ø–æ–∫—É–ø–∞—Ç–µ–ª—å
        1, // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        PAYMENT_TOKEN.address, // –≤–∞–ª—é—Ç–∞ (LEX)
        totalPrice // –æ–±—â–∞—è —Ü–µ–Ω–∞
      );
      
      console.log('üì´ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
      alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–∫—É–ø–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–•—ç—à: ${tx.hash}`);
      
      const receipt = await tx.wait();
      console.log('üéâ –ü–æ–∫—É–ø–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', receipt);
      alert('üéâ NFT —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤
      loadListings();
      
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏:', error);
      
      if (error.message?.includes('user rejected')) {
        alert('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
      } else if (error.message?.includes('insufficient funds')) {
        alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ LEX —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏');
      } else if (error.reason) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.reason}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    }
  };

  useEffect(() => {
    if (window.ethereum) {
      loadListings();
    }
  }, []);

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: '0 auto' }}>
      <h2>üõçÔ∏è –ö—É–ø–∏—Ç—å NFT –∑–∞ {PAYMENT_TOKEN.symbol}</h2>
      
      <div style={{ marginBottom: '20px', display: 'flex', gap: '10px', alignItems: 'center' }}>
        {!account ? (
          <button 
            onClick={connectWallet}
            style={{ 
              padding: '10px 20px', 
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              cursor: 'pointer'
            }}
          >
            üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å –∫–æ—à–µ–ª–µ–∫
          </button>
        ) : (
          <span>‚úÖ –ö–æ—à–µ–ª–µ–∫: {account.slice(0, 6)}...{account.slice(-4)}</span>
        )}
        
        <button 
          onClick={loadListings}
          disabled={loading}
          style={{ 
            padding: '10px 20px', 
            backgroundColor: '#28a745',
            color: 'white',
            border: 'none',
            borderRadius: '5px',
            cursor: loading ? 'not-allowed' : 'pointer'
          }}
        >
          {loading ? 'üîÑ –ó–∞–≥—Ä—É–∑–∫–∞...' : 'üîÑ –û–±–Ω–æ–≤–∏—Ç—å –ª–∏—Å—Ç–∏–Ω–≥–∏'}
        </button>
      </div>

      {loading ? (
        <div style={{ textAlign: 'center', padding: '40px' }}>
          <p>üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥–∏ –∏–∑ –±–ª–æ–∫—á–µ–π–Ω–∞...</p>
          <p>–ü—Ä–æ–≤–µ—Ä—è–µ–º {listings.length > 0 ? `${listings.length} –ª–∏—Å—Ç–∏–Ω–≥–æ–≤` : '–≤—Å–µ –ª–∏—Å—Ç–∏–Ω–≥–∏'}...</p>
        </div>
      ) : listings.length === 0 ? (
        <div style={{ textAlign: 'center', padding: '40px', background: '#f8f9fa', borderRadius: '10px' }}>
          <h3>üòî NFT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</h3>
          <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:</p>
          <ul style={{ textAlign: 'left', display: 'inline-block' }}>
            <li>–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</li>
            <li>–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –≤—ã –≤ —Å–µ—Ç–∏ Polygon Mainnet</li>
            <li>–£–±–µ–¥–∏—Ç—å—Å—è —á—Ç–æ NFT –±—ã–ª–∏ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω—ã –Ω–∞ –ø—Ä–æ–¥–∞–∂—É</li>
          </ul>
        </div>
      ) : (
        <div>
          <h3>üéØ –ù–∞–π–¥–µ–Ω–æ {listings.length} NFT –¥–ª—è –ø–æ–∫—É–ø–∫–∏</h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fill, minmax(300px, 1fr))', gap: '20px', marginTop: '20px' }}>
            {listings.map((listing) => (
              <div key={listing.listingId} style={{ 
                border: '1px solid #ddd', 
                borderRadius: '10px', 
                padding: '20px',
                background: 'white',
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
              }}>
                <h4>NFT #{listing.tokenId}</h4>
                <p><strong>–ö–æ–Ω—Ç—Ä–∞–∫—Ç:</strong> {listing.assetContract.slice(0, 6)}...{listing.assetContract.slice(-4)}</p>
                <p><strong>–í–ª–∞–¥–µ–ª–µ—Ü:</strong> {listing.tokenOwner.slice(0, 6)}...{listing.tokenOwner.slice(-4)}</p>
                <p><strong>–¶–µ–Ω–∞:</strong> {listing.pricePerToken} {PAYMENT_TOKEN.symbol}</p>
                <p><strong>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</strong> {listing.quantity}</p>
                <p><strong>ID –ª–∏—Å—Ç–∏–Ω–≥–∞:</strong> {listing.listingId}</p>
                
                <button 
                  onClick={() => buyNFT(listing.listingId, listing.pricePerToken)}
                  disabled={!account}
                  style={{ 
                    width: '100%',
                    padding: '12px',
                    backgroundColor: account ? '#dc3545' : '#6c757d',
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    fontSize: '16px',
                    cursor: account ? 'pointer' : 'not-allowed',
                    marginTop: '10px'
                  }}
                >
                  {account ? `üõí –ö—É–ø–∏—Ç—å –∑–∞ ${listing.pricePerToken} ${PAYMENT_TOKEN.symbol}` : '–ü–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫'}
                </button>
              </div>
            ))}
          </div>
        </div>
      )}

      <div style={{ marginTop: '30px', padding: '15px', background: '#e7f3ff', borderRadius: '5px' }}>
        <h4>üí° –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</h4>
        <p><strong>–ê–¥—Ä–µ—Å –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞:</strong> {CONTRACT_ADDRESSES[137]}</p>
        <p><strong>–¢–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã:</strong> {PAYMENT_TOKEN.symbol} ({PAYMENT_TOKEN.address})</p>
        <p><strong>–ù–∞–π–¥–µ–Ω–æ –ª–∏—Å—Ç–∏–Ω–≥–æ–≤:</strong> {listings.length}</p>
        <button 
          onClick={() => {
            console.log('–í—Å–µ –ª–∏—Å—Ç–∏–Ω–≥–∏:', listings);
            console.log('–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:', {
              marketplace: CONTRACT_ADDRESSES[137],
              paymentToken: PAYMENT_TOKEN
            });
          }}
          style={{ 
            padding: '5px 10px', 
            backgroundColor: '#6c757d',
            color: 'white',
            border: 'none',
            borderRadius: '3px',
            cursor: 'pointer'
          }}
        >
          üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏
        </button>
      </div>
    </div>
  );
};

export default BuyNFT;
