import React, { useState } from 'react';
import { ethers } from 'ethers';
import { CONTRACT_ADDRESSES, PAYMENT_TOKEN, NFT_CONTRACT } from '../utils/constants';
import { ERC721_ABI, MARKETPLACE_ABI } from '../utils/marketplaceABI';

declare global {
  interface Window {
    ethereum?: any;
  }
}

interface SellNFTProps {
  onListingCreated?: () => void;
}

const SellNFT: React.FC<SellNFTProps> = ({ onListingCreated }) => {
  const [tokenId, setTokenId] = useState('');
  const [price, setPrice] = useState('');
  const [loading, setLoading] = useState(false);
  const [account, setAccount] = useState('');
  const [status, setStatus] = useState<string>('');

  const connectWallet = async () => {
    if (!window.ethereum) {
      alert('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!');
      return;
    }

    try {
      const accounts = await window.ethereum.request({ 
        method: 'eth_requestAccounts' 
      });
      setAccount(accounts[0]);
      setStatus('‚úÖ –ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω');
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error);
    }
  };

  const listNFT = async () => {
    if (!window.ethereum) {
      alert('MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }

    if (!account) {
      alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
      return;
    }

    if (!tokenId || !price) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–Ω–∞ –∞–¥–µ–∫–≤–∞—Ç–Ω–∞—è
    const priceNumber = parseFloat(price);
    if (priceNumber <= 0) {
      alert('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0');
      return;
    }

    if (priceNumber > 1000000) {
      alert('–¶–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è');
      return;
    }

    setLoading(true);
    setStatus('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ª–∏—Å—Ç–∏–Ω–≥–∞...');

    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      const marketplaceAddress = CONTRACT_ADDRESSES[137];
      
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ NFT
      setStatus('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ NFT...');
      const nft = new ethers.Contract(NFT_CONTRACT, ERC721_ABI, signer);
      
      try {
        const owner = await nft.ownerOf(tokenId);
        if (owner.toLowerCase() !== account.toLowerCase()) {
          throw new Error(`–í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ NFT! –í–ª–∞–¥–µ–ª–µ—Ü: ${owner}`);
        }
        setStatus('‚úÖ –í–ª–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
      } catch (error: any) {
        if (error.message.includes('nonexistent token')) {
          throw new Error(`NFT —Å ID ${tokenId} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!`);
        }
        throw error;
      }

      // 2. –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
      setStatus('üîê –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É...');
      const isApproved = await nft.isApprovedForAll(account, marketplaceAddress);
      
      if (!isApproved) {
        setStatus('üìù –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
        const approveTx = await nft.setApprovalForAll(marketplaceAddress, true);
        setStatus(`‚è≥ –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è... ${approveTx.hash}`);
        await approveTx.wait();
        setStatus('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');
      } else {
        setStatus('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å');
      }

      // 3. –í—ã—Å—Ç–∞–≤–ª—è–µ–º NFT –Ω–∞ –ø—Ä–æ–¥–∞–∂—É
      setStatus('üí∞ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥...');
      const marketplace = new ethers.Contract(marketplaceAddress, MARKETPLACE_ABI, signer);
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ wei
      const priceInWei = ethers.parseUnits(price, PAYMENT_TOKEN.decimals);
      
      console.log('üí∞ –î–∞–Ω–Ω—ã–µ –ª–∏—Å—Ç–∏–Ω–≥–∞:', {
        nftContract: NFT_CONTRACT,
        tokenId: tokenId,
        price: price,
        priceInWei: priceInWei.toString(),
        priceBack: ethers.formatUnits(priceInWei, PAYMENT_TOKEN.decimals)
      });

      setStatus(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –ª–∏—Å—Ç–∏–Ω–≥–∞...`);
      const listTx = await marketplace.listNFT(NFT_CONTRACT, tokenId, priceInWei, {
        gasLimit: 300000
      });
      
      setStatus(`‚è≥ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è... ${listTx.hash}`);
      console.log('üì´ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞:', listTx);
      
      // –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
      const receipt = await listTx.wait();
      console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', receipt);
      
      setStatus('üéâ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!');

      alert(`üéâ NFT –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É!\n\n‚úÖ Token ID: ${tokenId}\nüí∞ –¶–µ–Ω–∞: ${price} LEX\n\n–¢–µ–ø–µ—Ä—å –æ–Ω –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ä–∞–∑–¥–µ–ª–µ "Buy NFTs"`);

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setTokenId('');
      setPrice('');

      // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      if (onListingCreated) {
        onListingCreated();
      }

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      setStatus(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
      
      if (error.message?.includes('user rejected')) {
        alert('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
      } else if (error.message?.includes('insufficient funds')) {
        alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏');
      } else if (error.reason) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.reason}`);
      } else {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
      <h2>üé® –ü—Ä–æ–¥–∞—Ç—å NFT –∑–∞ {PAYMENT_TOKEN.symbol}</h2>
      
      {!account ? (
        <div style={{ textAlign: 'center', padding: '40px' }}>
          <button 
            onClick={connectWallet}
            style={{ 
              padding: '15px 30px', 
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              fontSize: '18px',
              cursor: 'pointer'
            }}
          >
            üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
          </button>
        </div>
      ) : (
        <>
          <div style={{ background: '#d4edda', padding: '15px', borderRadius: '5px', marginBottom: '20px' }}>
            <p>‚úÖ <strong>–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:</strong> {account.slice(0, 6)}...{account.slice(-4)}</p>
            <p>üñºÔ∏è <strong>NFT –ö–æ–Ω—Ç—Ä–∞–∫—Ç:</strong> {NFT_CONTRACT.slice(0, 6)}...{NFT_CONTRACT.slice(-4)}</p>
            <p>üí∞ <strong>–¢–æ–∫–µ–Ω –æ–ø–ª–∞—Ç—ã:</strong> {PAYMENT_TOKEN.symbol}</p>
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>ID —Ç–æ–∫–µ–Ω–∞ NFT:</label>
            <input
              type="number"
              placeholder="1"
              value={tokenId}
              onChange={(e) => setTokenId(e.target.value)}
              style={{ width: '100%', padding: '10px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '16px' }}
            />
            <small style={{ color: '#666' }}>–í–≤–µ–¥–∏—Ç–µ ID NFT –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å</small>
          </div>
          
          <div style={{ marginBottom: '20px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>–¶–µ–Ω–∞ (–≤ {PAYMENT_TOKEN.symbol}):</label>
            <input
              type="number"
              placeholder="100"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              min="0.001"
              step="0.001"
              style={{ width: '100%', padding: '10px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '16px' }}
            />
            <small style={{ color: '#666' }}>–ù–∞–ø—Ä–∏–º–µ—Ä: 100, 50.5, 0.1</small>
          </div>
          
          <button 
            onClick={listNFT} 
            disabled={!tokenId || !price || loading}
            style={{ 
              width: '100%', 
              padding: '15px', 
              backgroundColor: (!tokenId || !price || loading) ? '#6c757d' : '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              fontSize: '18px',
              fontWeight: 'bold',
              cursor: (!tokenId || !price || loading) ? 'not-allowed' : 'pointer'
            }}
          >
            {loading ? '‚è≥ –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç–∏–Ω–≥...' : `üéØ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞ ${price} ${PAYMENT_TOKEN.symbol}`}
          </button>

          {status && (
            <div style={{ 
              marginTop: '20px', 
              padding: '15px', 
              background: status.includes('‚ùå') ? '#f8d7da' : 
                         status.includes('‚úÖ') ? '#d1ecf1' : 
                         status.includes('üéâ') ? '#d4edda' : '#fff3cd',
              color: status.includes('‚ùå') ? '#721c24' : 
                     status.includes('‚úÖ') ? '#0c5460' : 
                     status.includes('üéâ') ? '#155724' : '#856404',
              borderRadius: '5px',
              textAlign: 'center',
              border: status.includes('‚ùå') ? '1px solid #f5c6cb' : 
                      status.includes('‚úÖ') ? '1px solid #bee5eb' : 
                      status.includes('üéâ') ? '1px solid #c3e6cb' : '1px solid #ffeaa7'
            }}>
              {status}
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default SellNFT;

