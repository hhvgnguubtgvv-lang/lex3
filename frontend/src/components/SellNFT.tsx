
import React, { useState } from 'react';
import { ethers } from 'ethers';
import { CONTRACT_ADDRESSES, PAYMENT_TOKEN } from '../utils/constants';
import { ERC721_ABI } from '../utils/contracts';

declare global {
  interface Window {
    ethereum?: any;
  }
}

const SellNFT: React.FC = () => {
  const [nftContract, setNftContract] = useState('');
  const [tokenId, setTokenId] = useState('');
  const [price, setPrice] = useState('');
  const [loading, setLoading] = useState(false);
  const [account, setAccount] = useState('');

  // ABI –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ DirectListings extension
  const DIRECT_LISTINGS_ABI = [
    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—Å—Ç–∏–Ω–≥–∞
    "function createListing((address assetContract, uint256 tokenId, uint256 quantity, address currency, uint256 pricePerToken, uint128 startTimestamp, uint128 endTimestamp, bool reserved) _params) external returns (uint256 listingId)",
    "function totalListings() external view returns (uint256)"
  ];

  const connectWallet = async () => {
    if (!window.ethereum) {
      alert('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ MetaMask!');
      return;
    }

    try {
      const accounts = await window.ethereum.request({ 
        method: 'eth_requestAccounts' 
      });
      setAccount(accounts[0]);
      alert(`–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω: ${accounts[0].slice(0, 6)}...${accounts[0].slice(-4)}`);
    } catch (error) {
      alert('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞: ' + error);
    }
  };

  const createListing = async () => {
    if (!window.ethereum) {
      alert('MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!');
      return;
    }

    if (!account) {
      alert('–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ –∫–æ—à–µ–ª–µ–∫!');
      return;
    }

    if (!nftContract || !tokenId || !price) {
      alert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è!');
      return;
    }

    setLoading(true);
    try {
      const provider = new ethers.BrowserProvider(window.ethereum);
      const signer = await provider.getSigner();
      
      const marketplaceAddress = CONTRACT_ADDRESSES[137];
      
      console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø—Ä–æ–¥–∞–∂–∏...');

      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ NFT
      const nft = new ethers.Contract(nftContract, ERC721_ABI, signer);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–Ω–∏–µ NFT...');
      
      const owner = await nft.ownerOf(tokenId);
      if (owner.toLowerCase() !== account.toLowerCase()) {
        alert('‚ùå –í—ã –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü —ç—Ç–æ–≥–æ NFT!');
        return;
      }
      console.log('‚úÖ –í–ª–∞–¥–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ');

      // 2. –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É
      console.log('üîê –î–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—É...');
      const isApproved = await nft.isApprovedForAll(account, marketplaceAddress);
      
      if (!isApproved) {
        console.log('‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é approve...');
        const approveTx = await nft.setApprovalForAll(marketplaceAddress, true);
        await approveTx.wait();
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –¥–∞–Ω–æ');
      } else {
        console.log('‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —É–∂–µ –µ—Å—Ç—å');
      }

      // 3. –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –≤—ã–∑–æ–≤–∞:
      
      // –°–ø–æ—Å–æ–± A: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º ABI
      console.log('üîÑ –°–ø–æ—Å–æ–± A: –ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤...');
      const marketplaceABI = [
        "function createListing(tuple(address assetContract, uint256 tokenId, uint256 quantity, address currency, uint256 pricePerToken, uint128 startTimestamp, uint128 endTimestamp, bool reserved) _params) external returns (uint256 listingId)"
      ];
      
      const marketplace = new ethers.Contract(marketplaceAddress, marketplaceABI, signer);
      
      const listingParams = {
        assetContract: nftContract,
        tokenId: tokenId,
        quantity: 1,
        currency: PAYMENT_TOKEN.address,
        pricePerToken: ethers.parseUnits(price, 18),
        startTimestamp: Math.floor(Date.now() / 1000),
        endTimestamp: Math.floor(Date.now() / 1000) + (60 * 60 * 24 * 30), // 30 –¥–Ω–µ–π
        reserved: false
      };

      console.log('üì§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ª–∏—Å—Ç–∏–Ω–≥–∞:', listingParams);
      
      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –±–æ–ª—å—à–∏–º –ª–∏–º–∏—Ç–æ–º –≥–∞–∑–∞
      const tx = await marketplace.createListing(listingParams, {
        gasLimit: 500000 // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –≥–∞–∑–∞
      });
      
      console.log('üì´ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:', tx.hash);
      alert(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!\n–•—ç—à: ${tx.hash}\n\n–ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è...`);
      
      const receipt = await tx.wait();
      console.log('üéâ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', receipt);
      
      alert(`üéâ NFT —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–¥–∞–∂—É –∑–∞ ${price} ${PAYMENT_TOKEN.symbol}!`);

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setNftContract('');
      setTokenId('');
      setPrice('');

    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞:', error);
      
      if (error.message?.includes('user rejected')) {
        alert('‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é');
      } else if (error.message?.includes('insufficient funds')) {
        alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ MATIC –¥–ª—è –∫–æ–º–∏—Å—Å–∏–∏');
      } else if (error.reason) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.reason}`);
      } else if (error.data?.message) {
        alert(`‚ùå –û—à–∏–±–∫–∞: ${error.data.message}`);
      } else {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        alert(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n\n1. –ö–æ–Ω—Ç—Ä–∞–∫—Ç —Ç—Ä–µ–±—É–µ—Ç –≤—ã–∑–æ–≤ —á–µ—Ä–µ–∑ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å\n2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ—É–Ω–∫—Ü–∏–∏\n3. –ö–æ–Ω—Ç—Ä–∞–∫—Ç –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ ThirdWeb Dashboard: https://thirdweb.com/`);
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <div style={{ padding: '20px', maxWidth: '600px', margin: '0 auto' }}>
      <h2>üé® –ü—Ä–æ–¥–∞—Ç—å NFT –∑–∞ {PAYMENT_TOKEN.symbol}</h2>
      
      {!account ? (
        <div style={{ textAlign: 'center', padding: '40px' }}>
          <button 
            onClick={connectWallet}
            style={{ 
              padding: '15px 30px', 
              backgroundColor: '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '10px',
              fontSize: '18px',
              cursor: 'pointer'
            }}
          >
            üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å MetaMask
          </button>
        </div>
      ) : (
        <>
          <div style={{ background: '#d4edda', padding: '15px', borderRadius: '5px', marginBottom: '20px' }}>
            <p>‚úÖ <strong>–ö–æ—à–µ–ª–µ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω:</strong> {account.slice(0, 6)}...{account.slice(-4)}</p>
            <p>üè™ <strong>–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å:</strong> {CONTRACT_ADDRESSES[137]?.slice(0, 10)}...</p>
            <p>üí° <strong>–°—Ç–∞—Ç—É—Å:</strong> –ö–æ–Ω—Ç—Ä–∞–∫—Ç –æ—Ç–≤–µ—á–∞–µ—Ç (1 –ª–∏—Å—Ç–∏–Ω–≥)</p>
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ NFT:</label>
            <input
              type="text"
              placeholder="0x..."
              value={nftContract}
              onChange={(e) => setNftContract(e.target.value)}
              style={{ width: '100%', padding: '10px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '16px' }}
            />
          </div>
          
          <div style={{ marginBottom: '15px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>ID —Ç–æ–∫–µ–Ω–∞:</label>
            <input
              type="number"
              placeholder="123"
              value={tokenId}
              onChange={(e) => setTokenId(e.target.value)}
              style={{ width: '100%', padding: '10px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '16px' }}
            />
          </div>
          
          <div style={{ marginBottom: '20px' }}>
            <label style={{ display: 'block', marginBottom: '5px', fontWeight: 'bold' }}>–¶–µ–Ω–∞ (–≤ {PAYMENT_TOKEN.symbol}):</label>
            <input
              type="number"
              placeholder="100"
              value={price}
              onChange={(e) => setPrice(e.target.value)}
              min="0"
              step="0.001"
              style={{ width: '100%', padding: '10px', border: '1px solid #ddd', borderRadius: '4px', fontSize: '16px' }}
            />
          </div>
          
          <button 
            onClick={createListing} 
            disabled={!nftContract || !tokenId || !price || loading}
            style={{ 
              width: '100%', 
              padding: '15px', 
              backgroundColor: (!nftContract || !tokenId || !price || loading) ? '#6c757d' : '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '5px',
              fontSize: '18px',
              fontWeight: 'bold',
              cursor: (!nftContract || !tokenId || !price || loading) ? 'not-allowed' : 'pointer'
            }}
          >
            {loading ? '‚è≥ –í—ã—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ–¥–∞–∂—É...' : `üéØ –í—ã—Å—Ç–∞–≤–∏—Ç—å –∑–∞ ${price} ${PAYMENT_TOKEN.symbol}`}
          </button>

          <div style={{ marginTop: '20px', padding: '15px', background: '#fff3cd', borderRadius: '5px' }}>
            <h4 style={{ marginTop: 0 }}>üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:</h4>
            <p>–ï—Å–ª–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—Ç–∫–∞—Ç—ã–≤–∞—Ç—å—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –ª–∏—Å—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ ThirdWeb Dashboard:</p>
            <a 
              href={`https://thirdweb.com/polygon/${CONTRACT_ADDRESSES[137]}/direct-listings`}
              target="_blank"
              rel="noopener noreferrer"
              style={{ color: '#007bff', textDecoration: 'underline' }}
            >
              –û—Ç–∫—Ä—ã—Ç—å ThirdWeb Dashboard ‚Üí
            </a>
          </div>
        </>
      )}
    </div>
  );
};

export default SellNFT;

